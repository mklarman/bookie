<% if @in_pool == true %>

		<% @show_standings == true %>

	<% else %>

	<% end %>

	


	<% if @in_pool == true %>

		<% if @pool.groups.length == 0 %>

			<% @many_groups = false %>

			<% if current_user.id.to_s == @pool.commish_id %>

				<% if @ply1.class.to_s ==  "Ticket" %>

					<% @create_ready = true %>

				<% end %>

			<% end %>

		<% else %>

			

			<% if @needs_grading == true %>


			<% else %>

				<% self.get_remaining_contestants %>

				<% if @still_alive.length == 0 %>

					<% self.get_tied_users %>

					<% @tied_players.each do |p| %>

						<div><%= p.username + " tied for the win " %></div>

					<% end %>

				<% elsif @still_alive.length == 1 %>

					<div><%= @still_alive[0].username.upcase + " has won the pool" %>

				<% else %>

					<% if current_user.id.to_s == @pool.commish_id %>

						<% if @pool.groups.last.date != @my_date %>

							<% if @group_ready == true %>

								<div>COMMISIONER TOOLS


									<div><input type="submit" name="" value="CREATE GROUP" id="group_formA" class="group_button"></div>

									<script>
								
										group_formA.addEventListener("click", function(){

											new_group.submit()

										})
									</script>

								</div>

							<% else %>

								<div>COMMISIONER TOOLS
									
									<div>UPLOADING PLAYERS.  CHECK BACK AFTER 10am EASTERN.</div>

								</div>

							<% end %>

						<% end %>

					<% end %>

					<% @still_alive.each do |user| %>

						<% @qualified_players.push(user.id.to_i) %>


					<% end %>

					<% @qualified_players.each do |p| %>

						<% if p == current_user.id.to_i %>

							<% @qualified_player = true %>

						<% end %>

					<% end %>

					<% if @qualified_player == true %>

						<% current_user.selections.each do |s| %>

							<% if s.date == @my_date %>

								<% if s.pool_id.to_i == @pool.id.to_i %>

									<% @current_selection = true %>


								<% end %>

							<% end %>

						<% end %>

						<% if @current_selection == true %>

							<div id="metta data">
							
								<% Selection.all.each do |s| %>

									<% if s.pool_id.to_i == @pool.id.to_i %>

										<% if s.date == @my_date %>

											<% if s.selection == @pool.groups.last.player1 %>

												<% @player1_count = @player1_count + 1 %>

											<% elsif s.selection == @pool.groups.last.player2 %>

												<% @player2_count = @player2_count + 1 %>

											<% elsif s.selection == @pool.groups.last.player3 %>

												<% @player3_count = @player3_count + 1 %>

											<% elsif s.selection == @pool.groups.last.player4 %>

												<% @player4_count = @player4_count + 1 %>

											<% elsif s.selection == @pool.groups.last.player5 %>

												<% @player5_count = @player5_count + 1 %>

											<% end %>

										<% end %>

									<% end %>

								<% end %>

								<div id="data_display">
									
									<div><%= @pool.groups.last.player1 + " " + @player1_count.to_s %></div>
									
									<div><%= @pool.groups.last.player2 + " " + @player2_count.to_s %></div>

									<% if @pool.groups.last.player3.length != 1 %>
									
										<div><%= @pool.groups.last.player3 + " " + @player3_count.to_s %></div>

									<% end %>

									<% if @pool.groups.last.player4.length != 1  %>
									
										<div><%= @pool.groups.last.player4 + " " + @player4_count.to_s %></div>

									<% end %>

									<% if @pool.groups.last.player5.length != 1  %>
									
										<div><%= @pool.groups.last.player5 + " " + @player5_count.to_s %></div>

									<% end %>

								</div>

							</div>


						<% else %>

							<% if @pool.groups.last.date == @my_date %>

								<div id="group">

									<div id="pl1" class="group_players"></div>
									<div id="pl2" class="group_players"></div>
									<div id="pl3" class="group_players"></div>
									<div id="pl4" class="group_players"></div>
									<div id="pl5" class="group_players"></div>
									
									<script>

										var groupId
										var player1 = ""
										var player2 = ""
										var player3 = ""
										var player4 = ""
										var player5 = ""
										var player_holder = []
											

										<% Group.all.each do |g| %>

											<% if g.pool_id.to_i == @pool.id.to_i %>

												<% if g.date == @my_date %>

													groupId = "<%= g.id %>"

													player1 = " "
													player2 = " "
													player3 = " "
													player4 = " "
													player5 = " "

													player1 = "<%= g.player1 %>"
													player_holder.push(player1)
													
													player2 = "<%= g.player2 %>"
													player_holder.push(player2)

													<% if g.player3 != nil %>

														player3 = "<%= g.player3 %>"
														player_holder.push(player3)

													<% end %>

													<% if g.player4 != nil %>

														player4 = "<%= g.player4 %>"
														player_holder.push(player4)

													<% end %>

													<% if g.player5 != nil %>

														player5 = "<%= g.player5 %>"
														player_holder.push(player5)				

													<% end %>

												<% end %>

											<% end %>

										<% end %>

										pl1.innerHTML = player1
										pl2.innerHTML = player2
										pl3.innerHTML = player3
										pl4.innerHTML = player4
										pl5.innerHTML = player5


										pl1.addEventListener("click", function(){

											selection = player1
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl2.addEventListener("click", function(){

											selection = player2
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl3.addEventListener("click", function(){

											selection = player3
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl4.addEventListener("click", function(){

											selection = player4
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl5.addEventListener("click", function(){

											selection = player5
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})



									</script>

								</div>

							<% else %>

								<div><p>
								
									WAITING FOR YOUR COMMISSIONER TO GENERATE THE NEXT GROUP.



								</p></div>


							<% end %>


						<% end %>


					<% else %>

						


					<% end %>

				<% end %>

			<% end %>		

		<% end %>

	<% else %>


		<div>I'M SORRY BUT YOU ARE NOT IN THIS POOL</div>

	<% end %>


	<div id="main_cont_pool">
	
	<div id="pool_standings">
	
		<% if @in_pool == true %>

			<div id="pool_stand">

				

					<% end %>

				<% end %>

			</div>

		<% end %>

	</div>

	<div id="group_display">

		<% if @in_pool == true %>

			<% if @many_groups == false %>

				<div class="action_message">
					
					WAITING ON YOUR COMMISSIONER TO GENERATE THE FIRST GROUP


				</div>

			<% elsif @needs_grading == true %>

				<div class="action_message">
					
					WAITING ON YOUR COMMISSIONER TO SUBMIT LAST NIGHTS RESULTS.


				</div>

			<% elsif @pool.groups.last.date == @my_date && @qualified_player == true && @still_alive.length > 2 %>

				<% if @current_selection == true %>

					<div id="metta data">
							
						<% Selection.all.each do |s| %>

							<% if s.pool_id.to_i == @pool.id.to_i %>

								<% if s.date == @my_date %>

									<% if s.selection == @pool.groups.last.player1 %>

										<% @player1_count = @player1_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player2 %>

										<% @player2_count = @player2_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player3 %>

										<% @player3_count = @player3_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player4 %>

										<% @player4_count = @player4_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player5 %>

										<% @player5_count = @player5_count + 1 %>

									<% end %>

								<% end %>

							<% end %>

						<% end %>

						<div id="data_display">
							
							<div><%= @pool.groups.last.player1 + " " + @player1_count.to_s %></div>
							
							<div><%= @pool.groups.last.player2 + " " + @player2_count.to_s %></div>

							<% if @pool.groups.last.player3.length != 1  %>
							
								<div><%= @pool.groups.last.player3 + " " + @player3_count.to_s %></div>

							<% end %>

							<% if @pool.groups.last.player4.length != 1  %>
							
								<div><%= @pool.groups.last.player4 + " " + @player4_count.to_s %></div>

							<% end %>

							<% if @pool.groups.last.player5.length != 1  %>
							
								<div><%= @pool.groups.last.player5 + " " + @player5_count.to_s %></div>

							<% end %>

						</div>

					</div>

				<% else %>

					

			<% elsif @pool.groups.length > 0 && @still_alive.length == 1 %>

				<div class="action_message">
					
						<%= @still_alive[0] + " " + "has won the pool.  Start another pool here " %> <%= link_to "PLAY FANISIDE POOLS", pools_path %>


				</div>

			<% elsif @pool.groups.length > 0 && @still_alive.length == 0 %>

				
				<% self.get_tied_users %>

				<% @tied_players.each do |p| %>

					<div><%= p.username + " tied for the win " %></div>
					<div><%= "This pool is over." %></div>

				<% end %>


			<% end %>

		<% end %>

		<div id="commisioner_tools">

	<% if @needs_grading == true %>

		<% Ticket.all.each do |t| %>

			<% if t.updated == "f" && t.date != @my_date %>

				<% @grade_ready = false %>

			<% end %>

		<% end %>

		<% if current_user.id == @pool.commish_id.to_i %>

			<% if @grade_ready == true %>


				<div><%= link_to "GRADE SELECTIONS", edit_selection_path(@op_sel.last) %></div>

			<% else %>

				<div> UPLOADING PLAYER POINTS.  CHECK BACK SOON.</div>

			<% end %>

		<% end %>

	

	<% elsif @create_ready == true and @many_groups == false %>

		<div><input type="submit" name="" value="CREATE GROUP" id="group_formA" class="group_button"></div>

		<script>
			
			group_formA.addEventListener("click", function(){

				new_group.submit()

			})
		</script>

	<% elsif @commish == true && @create_ready == false && @still_alive.length > 1 %>

			<div>UPLOADING PLAYERS....</div>


	<% end %>

</div>




<% @still_alive.each do |u| %>

	<div><%= u.username %></div>

<% end %>


<% self.get_remaining_contestants %>

<% @still_alive.each do |u| %>

	<% results = [] %>

	<% u.selections.each do |s| %>

		<% if s.pool_id.to_i == @pool.id %>

			<% results.push(s) %>

		<% end %>

	<% end %>

	<% @s_total =  results.length %>

	<% if @s_total != @groups_total %>

		<% @eliminated.push(u) %>

	<% end %>



<% end %>

<%= @still_alive.length %>






















<% @groups.each do |g| %>

	<% if g.pool_id.to_i == @pool.id.to_i && g.date != @my_date %>

		<% @this_pools_groups.push(g) %>

	<% end %>

<% end %>

<% if @needs_grading == true %>


	<% @contestants.each do |c| %>

		<% @picks = [] %>

		<% c.selections.each do |s| %>

			<% if s.pool_id.to_i == @pool.id.to_i %>

				<% @picks.push(s) %>

			<% end %>


		<% end %>

		<% if @picks.length.to_i == @this_pools_groups.length.to_i %> 

			<%= c.sports_book_name %>
			<%= @picks.length %>

		<% else %>

			<%= c.sports_book_name %>
			<%= @picks.length %>

		<% end %> 

	<% end %>

	<% if @pool.commish_id.to_i == current_user.id.to_i %>

		link to editig the pool selections


	<% end %>


<% else %>


	<% self.get_remaining_contestants %>

	<% if @players_left.length.to_i == 0 %>

		<% if @pool.date == @my_date %>

			

		<% else %>

			<% @contestants.each do |c| %>

				<% @sel_check = [] %>
				<% @retrieve = false %>

				<% c.selections.each do |s| %>

					<% if s.pool_id.to_i == @pool.id.to_i %>

						<% @sel_check.push(s) %>

					<% end %>


				<% end %>

				<% if @sel_check.length.to_i == @this_pools_groups.length.to_i %>



				<% end %>

			<% end %>

		<% end %>

	<% elsif @players_left.length == 1 %>

	
	<% else %>

	
	<% end %>


<% end %>

<% else %>

			<div id="pool_player_box">

				<p>WAITING FOR POOL COMMISSIONER TO GENERATE THE NEXT PLAYER GROUP</p>

			</div>

		<% end %>

	<% else %>

		<% current_user.selections.each do |s| %>

			<% if s.date == @my_date %>

				<% if s.pool_id.to_i == @pool.id.to_i %>

					<% @current_selection = true %>


				<% end %>

			<% end %>

		<% end %>

		<% if @pool.groups.last.date == @my_date %>

				<% if @current_selection == true %>

					<div id="metta data">
						
						<% Selection.all.each do |s| %>

							<% if s.pool_id.to_i == @pool.id.to_i %>

								<% if s.date == @my_date %>

									<% if s.selection == @pool.groups.last.player1 %>

										<% @player1_count = @player1_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player2 %>

										<% @player2_count = @player2_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player3 %>

										<% @player3_count = @player3_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player4 %>

										<% @player4_count = @player4_count + 1 %>

									<% elsif s.selection == @pool.groups.last.player5 %>

										<% @player5_count = @player5_count + 1 %>

									<% end %>

								<% end %>

							<% end %>

						<% end %>

						<div id="data_display">
							
							<div><%= @pool.groups.last.player1 + " " + @player1_count.to_s %></div>
							
							<div><%= @pool.groups.last.player2 + " " + @player2_count.to_s %></div>

							<% if @pool.groups.last.player3.length > 3  %>
							
								<div><%= @pool.groups.last.player3 + " " + @player3_count.to_s %></div>

							<% end %>

							<% if @pool.groups.last.player4.length > 3  %>
							
								<div><%= @pool.groups.last.player4 + " " + @player4_count.to_s %></div>

							<% end %>

							<% if @pool.groups.last.player5.length > 3  %>
							
								<div><%= @pool.groups.last.player5 + " " + @player5_count.to_s %></div>

							<% end %>

						</div>

					</div>
			
				<% else %>

					<div id="group">

						<div id="pl1" class="group_players"></div>
						<div id="pl2" class="group_players"></div>
						<div id="pl3" class="group_players"></div>
						<div id="pl4" class="group_players"></div>
						<div id="pl5" class="group_players"></div>
						
						<script>

							var groupId
							var player1 = ""
							var player2 = ""
							var player3 = ""
							var player4 = ""
							var player5 = ""
							var player_holder = []
								

							<% Group.all.each do |g| %>

								<% if g.pool_id.to_i == @pool.id.to_i %>

									<% if g.date == @my_date %>

										groupId = "<%= g.id %>"

										player1 = " "
										player2 = " "
										player3 = " "
										player4 = " "
										player5 = " "

										player1 = "<%= g.player1 %>"
										player_holder.push(player1)
										
										player2 = "<%= g.player2 %>"
										player_holder.push(player2)

										<% if g.player3 != nil %>

											player3 = "<%= g.player3 %>"
											player_holder.push(player3)

										<% end %>

										<% if g.player4 != nil %>

											player4 = "<%= g.player4 %>"
											player_holder.push(player4)

										<% end %>

										<% if g.player5 != nil %>

											player5 = "<%= g.player5 %>"
											player_holder.push(player5)				

										<% end %>

									<% end %>

								<% end %>

							<% end %>

							pl1.innerHTML = player1
							pl2.innerHTML = player2
							pl3.innerHTML = player3
							pl4.innerHTML = player4
							pl5.innerHTML = player5


							pl1.addEventListener("click", function(){

								selection = player1
								selection_group_id.value = groupId
								selection_selection.value = selection
								new_selection.submit()


							})

							pl2.addEventListener("click", function(){

								selection = player2
								selection_group_id.value = groupId
								selection_selection.value = selection
								new_selection.submit()


							})

							pl3.addEventListener("click", function(){

								selection = player3
								selection_group_id.value = groupId
								selection_selection.value = selection
								new_selection.submit()


							})

							pl4.addEventListener("click", function(){

								selection = player4
								selection_group_id.value = groupId
								selection_selection.value = selection
								new_selection.submit()


							})

							pl5.addEventListener("click", function(){

								selection = player5
								selection_group_id.value = groupId
								selection_selection.value = selection
								new_selection.submit()


							})



						</script>

					</div>
				
				<% end %>


			<% else %>

				<% if current_user.id.to_i == @pool.commish_id.to_i %>

					<% if @pool.sport == "NFL" && @nfl_check == true %>

						<% if @players_in_group == 2 %>

							<% @ply1 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply1) %>

							<% @ply2 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply2) %>
					
						<% elsif @players_in_group == 3 %>

							<% @ply1 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply1) %>

							<% @ply2 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply2) %>

							<% @ply3 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply3) %>
					
						<% elsif @players_in_group == 4 %>

							<% @ply1 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply1) %>

							<% @ply2 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply2) %>

							<% @ply3 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply3) %>

							<% @ply4 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply4) %>
					
						<% elsif @players_in_group == 5 %>

							<% @ply1 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply1) %>

							<% @ply2 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply2) %>

							<% @ply3 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply3) %>

							<% @ply4 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply4) %>

							<% @ply5 = @nfl_tickets.sample %>
							<% @nfl_tickets.delete(@ply5) %>

						<% end %>

					<% end %>

					<% if @pool.sport == "NBA" && @nba_check == true %>

						<% if @players_in_group == 2 %>

							<% @ply1 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply1) %>

							<% @ply2 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply2) %>
					
						<% elsif @players_in_group == 3 %>

							<% @ply1 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply1) %>

							<% @ply2 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply2) %>

							<% @ply3 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply3) %>
					
						<% elsif @players_in_group == 4 %>

							<% @ply1 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply1) %>

							<% @ply2 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply2) %>

							<% @ply3 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply3) %>

							<% @ply4 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply4) %>
					
						<% elsif @players_in_group == 5 %>

							<% @ply1 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply1) %>

							<% @ply2 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply2) %>

							<% @ply3 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply3) %>

							<% @ply4 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply4) %>

							<% @ply5 = @nba_tickets.sample %>
							<% @nba_tickets.delete(@ply5) %>

						<% end %>

					<% end %>

					<% if @pool.sport == "MLB" && @mlb_check == true %>

						<% if @players_in_group == 2 %>

							<% @ply1 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply1) %>

							<% @ply2 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply2) %>
						
						<% elsif @players_in_group == 3 %>

							<% @ply1 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply1) %>

							<% @ply2 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply2) %>

							<% @ply3 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply3) %>
						
						<% elsif @players_in_group == 4 %>

							<% @ply1 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply1) %>

							<% @ply2 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply2) %>

							<% @ply3 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply3) %>

							<% @ply4 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply4) %>
						
						<% elsif @players_in_group == 5 %>

							<% @ply1 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply1) %>

							<% @ply2 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply2) %>

							<% @ply3 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply3) %>

							<% @ply4 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply4) %>

							<% @ply5 = @mlb_tickets.sample %>
							<% @mlb_tickets.delete(@ply5) %>

						<% end %>

					<% end %>

					<div>

						<%= form_for @group do |g| %>

							<%= g.text_field :pool_id, value: @pool.id %>
							<%= g.text_field :date, value: @my_date %>
							<%= g.text_field :player1, value: @ply1.name %>
							<%= g.text_field :player2, value: @ply2.name %>
			
							<% if @players_in_group == 3 %>

								<% @ply4 = " " %>
								<% @ply5 = " " %>
					
								<%= g.text_field :player3, value: @ply3.name %>
								<%= g.text_field :player4, value: @ply4 %>
								<%= g.text_field :player5, value: @ply5 %>

							<% end %>

							<% if @players_in_group == 4 %>

								<% @ply5 = " " %>


								<%= g.text_field :player3, value: @ply3.name %>
								<%= g.text_field :player4, value: @ply4.name %>
								<%= g.text_field :player5, value: @ply5 %>

							<% end %>

							<% if @players_in_group == 5 %>


								<%= g.text_field :player3, value: @ply3.name %>
								<%= g.text_field :player4, value: @ply4.name %>
							
								<%= g.text_field :player5, value: @ply5.name %>

							<% end %>

						<% end %>

					</div>

					
					

				<% else %>

					<div id="pool_player_box">

						<p>WAITING FOR POOL COMMISSIONER TO GENERATE THE NEXT PLAYER GROUP</p>

					</div>

				<% end %>

			<% end %>	
		
		<% end %>

	<% else %>

		<% self.grade_check %>

		<% if @needs_grading == true %>

			


		<% else %>


			<% self.get_remaining_contestants %>

			<% if @still_alive.length == 0 %>

				<% self.get_tied_users %>

				<% @tied_players.each do |p| %>

					<div><%= p.username + " tied for the win " %></div>

				<% end %>

			<% elsif @still_alive.length == 1 %>

				<div><%= @still_alive[0].username.upcase + " has won the pool" %>

			<% else %>

				<% @still_alive.each do |user| %>

					<% @qualified_players.push(user.id.to_i) %>


				<% end %>

				<% @qualified_players.each do |p| %>

					<% if p == current_user.id.to_i %>

						<% current_user.selections.each do |s| %>

							<% if s.date == @my_date %>

								<% if s.pool_id.to_i == @pool.id.to_i %>

									<% @current_selection = true %>


								<% end %>

							<% end %>

						<% end %>

						<% if @pool.groups.last.date == @my_date %>

							<% if @current_selection == true %>

								<div id="metta data">
						
									<% Selection.all.each do |s| %>

										<% if s.pool_id.to_i == @pool.id.to_i %>

											<% if s.date == @my_date %>

												<% if s.selection == @pool.groups.last.player1 %>

													<% @player1_count = @player1_count + 1 %>

												<% elsif s.selection == @pool.groups.last.player2 %>

													<% @player2_count = @player2_count + 1 %>

												<% elsif s.selection == @pool.groups.last.player3 %>

													<% @player3_count = @player3_count + 1 %>

												<% elsif s.selection == @pool.groups.last.player4 %>

													<% @player4_count = @player4_count + 1 %>

												<% elsif s.selection == @pool.groups.last.player5 %>

													<% @player5_count = @player5_count + 1 %>

												<% end %>

											<% end %>

										<% end %>

									<% end %>

									<div id="data_display">
							
									<div><%= @pool.groups.last.player1 + " " + @player1_count.to_s %></div>
							
									<div><%= @pool.groups.last.player2 + " " + @player2_count.to_s %></div>

									<% if @pool.groups.last.player3.length > 3  %>
							
										<div><%= @pool.groups.last.player3 + " " + @player3_count.to_s %></div>

									<% end %>

									<% if @pool.groups.last.player4.length > 3  %>
							
										<div><%= @pool.groups.last.player4 + " " + @player4_count.to_s %></div>

									<% end %>

									<% if @pool.groups.last.player5.length > 3  %>
							
										<div><%= @pool.groups.last.player5 + " " + @player5_count.to_s %></div>

									<% end %>

									</div>

								</div>
			
							<% else %>

									<div id="group">

									<div id="pl1" class="group_players"></div>
									<div id="pl2" class="group_players"></div>
									<div id="pl3" class="group_players"></div>
									<div id="pl4" class="group_players"></div>
									<div id="pl5" class="group_players"></div>
							
									<script>

										var groupId
										var player1 = ""
										var player2 = ""
										var player3 = ""
										var player4 = ""
										var player5 = ""
										var player_holder = []
									

										<% Group.all.each do |g| %>

											<% if g.pool_id.to_i == @pool.id.to_i %>

												<% if g.date == @my_date %>

													groupId = "<%= g.id %>"

													player1 = " "
													player2 = " "
													player3 = " "
													player4 = " "
													player5 = " "

													player1 = "<%= g.player1 %>"
													player_holder.push(player1)
													
													player2 = "<%= g.player2 %>"
													player_holder.push(player2)

													<% if g.player3 != nil %>

														player3 = "<%= g.player3 %>"
														player_holder.push(player3)

													<% end %>

													<% if g.player4 != nil %>

														player4 = "<%= g.player4 %>"
														player_holder.push(player4)

													<% end %>

													<% if g.player5 != nil %>

														player5 = "<%= g.player5 %>"
														player_holder.push(player5)				

													<% end %>

												<% end %>

											<% end %>

										<% end %>

										pl1.innerHTML = player1
										pl2.innerHTML = player2
										pl3.innerHTML = player3
										pl4.innerHTML = player4
										pl5.innerHTML = player5


										pl1.addEventListener("click", function(){

											selection = player1
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl2.addEventListener("click", function(){

											selection = player2
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl3.addEventListener("click", function(){

											selection = player3
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl4.addEventListener("click", function(){

											selection = player4
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})

										pl5.addEventListener("click", function(){

											selection = player5
											selection_group_id.value = groupId
											selection_selection.value = selection
											new_selection.submit()


										})



									</script>

								</div>
				
							<% end %>


						<% else %>

							<div id="group_waiting_mess">

								<p>WAITING FOR YOUR COMMISSIONER TO GENERATE THE NEXT GROUP</p>


							</div>


						<% end %>	



					<% else %>

						<div id="metta data">
						
							<% Selection.all.each do |s| %>

								<% if s.pool_id.to_i == @pool.id.to_i %>

									<% if s.date == @my_date %>

										<% if s.selection == @pool.groups.last.player1 %>

											<% @player1_count = @player1_count + 1 %>

										<% elsif s.selection == @pool.groups.last.player2 %>

											<% @player2_count = @player2_count + 1 %>

										<% elsif s.selection == @pool.groups.last.player3 %>

											<% @player3_count = @player3_count + 1 %>

										<% elsif s.selection == @pool.groups.last.player4 %>

											<% @player4_count = @player4_count + 1 %>

										<% elsif s.selection == @pool.groups.last.player5 %>

											<% @player5_count = @player5_count + 1 %>

										<% end %>

									<% end %>

								<% end %>

							<% end %>

							<div id="data_display">
					
								<div><%= @pool.groups.last.player1 + " " + @player1_count.to_s %></div>
						
								<div><%= @pool.groups.last.player2 + " " + @player2_count.to_s %></div>

								<% if @pool.groups.last.player3.length > 3  %>
						
									<div><%= @pool.groups.last.player3 + " " + @player3_count.to_s %></div>

								<% end %>

								<% if @pool.groups.last.player4.length > 3  %>
						
									<div><%= @pool.groups.last.player4 + " " + @player4_count.to_s %></div>

								<% end %>

								<% if @pool.groups.last.player5.length > 3  %>
						
									<div><%= @pool.groups.last.player5 + " " + @player5_count.to_s %></div>

								<% end %>

							</div>

						</div>



					<% end %>

				<% end %>

			<% end %>

		<% end %>

	<% end %>

<% else %>

	<div id="pool_show_mess">

		<p>YOU ARE NOT IN THIS POOL.  SORRY...</p>	

	</div>


<% end %>





		<div class="pool_fields">
			
			


		</div>
		
		<div class = "pool_fields">
			
			

		</div>

		<div class = "pool_fields">
			
		

		

			<div class = "pool_fields">
			
			<div>MONTH</div>
				
				
				

				<div class="month_cont">

					

				</div>
				
			</div>

			


			<div class = "pool_fields">

				<div>Day:</div>
				

				<div class="day_cont">

					
					
				</div>

				
	
				

			</div>

			<div class = "pool_fields">
			
				

		

			<div class = "pool_fields">
			
				

				<div class="month_cont">

					

				</div>
				
			</div>

				


			<div class = "pool_fields">

				

			<div class = "pool_fields">
			
				




			</div>




		</div>

<div class = "hide">

	Users:

	 sports_book_name
	 admin: boolean


	 Clients:

	 user_id
	 first_name
	 last_name
	 type
	 stakes
	 quantity

	 Wager:

	 user_id
	 client_id
	 type
	 amount
	 teams
	 spreads
	 date
	 net_result
	 client_bankroll
	 user_bankroll
	 rating: winner or loser
	 graded: boolean

	 Matchup:

	 date
	 sport
	 fav
	 underdog
	 fav_line
	 dog_line
	 total
	 fav_score
	 dog_score
	 fav_straight_bet
	 fav_two_teas
	 fav_three_teas
	 fav_five_teas
	 dog_straight_bet
	 dog_two_teas
	 dog_three_teas
	 dog_five_teas
	 total_result
	 total_result_two
	 total_result_three
	 total_result_five
	 updated

	 I have a protype for the client fishing, wager generation, and wager grading.  Alot of detail needed, especially for the grading(all the math for the wager analysis).  The last controller to set-up is the matchups.  The matchups will give me access to the score of the game, total which are two variables needed for the grading wagers math.  The problem is how do I matchup the proper matchup with the bet.  I think it will be best to grab the matchups by the date.  Loop them and put all the winners ATS in one array, the losers in another.  Have to do for every type of teaser as well.  Then ask if the teams in their bet are in the winning array for the proper bet.  If they are then credit their bankroll and debit the user's bankroll, vice versa if they lose.

	 How do I start the bankrolls for the users and the client.  They are not set to be determined until the first wager is made.  Have to make the clients BR at the time of creation and then set that equal to the var in the form.  For the user BR will need some if statements.  If users.wagers.graded == false then the bankroll is 10k, if true the bankroll is users.wagers.last.graded.bankroll.

	 I'm thinking to use Team models instaed of matchups.  Teams allows me to be specific and compare a teams results vs the teams in a wager.  The form can cover how that teams does against the spread.

	 the calculations:

	 for grade wagers need to grab the wager values needed in erb and set them to the js variables, then pass those js variables through the proper functions and then set those values in the form.

	 for the reverses can use js functions and pass the spreads into the function and just search for ML lines and write those exceptions. Scratch that.  I think we handle in ruby.  If doing by teams: I need spread.

	 Sign up.  Get a client.  Generate client action.  View action.  Grade wagers.

	 To generate client action:  need access to the client form.  Need arrays on the page that house choices for bet amounts, bet types, teams(the name of the Team model; loop through teams and look for the "on" field, if on then put team.name in the array.)

	 select the client;
	 Read the client attributes from his form for stakes and bet types.  Each response points to an array or choices.  Take a sample of those arrays to fill in wager form.  Run if statements off of wager type to see how many teams you need.  Sample the team arrays wich will be the team names of the Team model that is turned om.  Seperate teams by sport and totals by sport.  For totals need to add an attribute to the team model: "Under Ravens 48.5"

	 for new wager

	 once eligible teams are sorted, fill in the teams and spreads on the wager form. have to do a length check on eligible arrays and make the proper wager choice, then fill in the teams using the proper arrays, gonna have to do a  while loop.

	 new wager page:

	 sort all the "on" teams into the proper arrays.

	 Have to run checks on the lengths of the appropriate arrays and see how many eligible teams their are.  Also have to have checks in the wager for nu duplicate teams and no opponents of the same matchup.  And for future wagers must run a no opponents check so clients can't bet both sides to a game, maybe also have a check for no duplicate wagers.  Then submit wager once all checks are clear.

	 for generating new wager:

	 Loop through the sports that are listed in the form, isolate the teams that the client would bet on.  Have a random number genrator pick "heads or tails" on the team or opponent and the over and the under.  Have these picks stored in an array, loop throug said array and for each element loop through all selections made so far and ask if any are opposites, if they are set the picks equal to the selection.  This will make the client stay on the same side of a game no matter how many wagers they make.

	 When choosing wager type, knowing how many available choices there are is important.  A wager type that needs five different teams can't be made when there is only two games.  Have to have a check for that.

	 Creating the wager:

	 Filter all on teams into their proper array

	 get Amount

	 get the length of the array that holds all possible choices for said bettor

	 check to see if the length is less than 5, less than 4, less than 3, less than 2, less than 1.  Have the available wagers be held under each if statement.  In which if statement the code lands is the pool of choices for the wager type for said wager.

	 Next is to pick the teams to fill the wager, the if statements here will work off of wager type.  As a selection is made, have that selection fall out of the array of choices.  To do that, once a selection is made and stored in a variable, loop through the selection array and ask where the selection and selection array are equal and cut that element from the array.  This way a selection can't appear in the same wager twice.

	 once client, amount, type, and teams are set, the wager is ready to be saved.

	 PAGES:

	 Landing Page: A thematic page that speaks to the theme, has the login, and a link to sign up.

	 SIGN UP: Holds the registration form for new members

	 Your SportsBook, if user.clients == niil, show a message that they need to get some clients and how to get clients.  If they have users but no current wagers, display "You Haven't booked any bets today yet". If their is current wagers then this page will display today's action.

	 Clients New: Fish for clients

	 Wagers New: Action contracts

	 Wagers Edit: Grade Action Contracts, display User bankroll here.

	 Sports Book info: Client list with net profit/loss figure.  The net p/l for last ten.  The net p/l for various wager types.  This may be client/index.  Give aggregate info, for specific client info you click on the client and are brought to..

	 Client/show page where the detailed stats of a specific client can be seen

	 How to Play: explain the object for the game

	 Well, the hard coding is complete.  Users get to own and operate their personal sports book equipped with real clients with varying betting habits, ten different wager options to choose from, a complete breakdown of all the stats for each client, clients as a whole, and the sports book.

	 What's left to do?

	 1. Sew up the details of the core functionality.
	 2. Integrate fantasy player vs player betting.
	 3. Figure out how leagues will work and integrate that.
	 4. Launch to Heroku.
	 5. Think about timezones and how start times will work.

	 LEAGUE PLAY:

	 There will have to be a league model that will take a user_id, league_password, league_clients.  This password will be distributed by the league creator: current_user.  League Players come to the site and hit the league play icon, where they are prompted for their league's password.  Once the password is entered they are brought to that league's index page where it will list the participants and the league creator.  League players will have to fill out a form that will take a user_id, league bank, other paramaters.  The user_id of the league creator will have access to the tools that create the league clients, or have the league clients created at the point that the league is created. Create three of each type of client and then just call the league client list and perform action in the normal way.  Give the current_user the ability to set which group of clients will make what kind of bets: "Straight", "Teasers", "Reverses + Parlays".  Have to find a way for the user to make that determination.  JS maybe for that.  Have each client class type listed and under each one have the three options.  They have to put no more than one client class in each group.  Once that is set then they can begin to book action. 


	 Touch Ups:

	In My Sports Book

	 Separate grade wagers from current wagers.  On grade wager page, let them see net results from graded wagers.  Maybe add in a drop down that lets them select the date and have the wagers appear.

	 Fish For Clients

	 This page needs a general cleaning up and centering.  Make the user's client total big and visible.

	 For Client List

	 List clients by group name, all clients of a certain stakes grouped together.

	 Possible league format:

	 Tournament style where users enter and have to start winning clients and then booking their action.  This lasts over the whole tournament which could last one day or 365 days.  Maybe the site iteself hosts the yearly tournament which is the 365 day calendar.  The winner is crowned the king bookmaker and gets to win the bookmakers cup.  But community members can start private tournaments too and set the duration, set how many entrants.  Maybe tournaments are run all the time and community members can enter into them.  They win points for first, second, thrid.  World series of bookmaking.

	 revisit the sports book data page and revamp the style.  Sort clients by stakes and clean it up as well as maybe add some stats.

	 You have to go in and test for real so fix the dislay on grade.  Grade has to turn display off, and then I can enter new matchups and turn the display on.  When you loop through teams you have to look for team name as well as the date of the wager has to match the date of the matchup.

	 Write in the snippet of code that will let you work around the bug on wagers new.


	 LEAGUE PLAY:

	 A league will have a form that gets filled out.  The form will take a user_id - which will be "1" or admin user id or can be the users id if they are creating a league.

	 League will also take a start date and end date and a password.

	 To start a league a user will need to fill out the league form and then invite who they want.  Those users come to the site, enter the League play tab, enter the password for the league and then brought to that leagues home page, there they are prompted to got to the league client page to get their clients. Can automate this.  league clients will take a league id and a user id along with all the rest.  league wagers will also take a league id and a user id.

	 going to need a standings page and a page where everyone gets to see everyone elses action..? and the score of the tournament.  How can I issue tournament points like for a first second and third?

	 would have to score their tournament history.  How?  grab all their wagers that have a league id, get league id and look up all users that have said id in wagers.  Gather those users up and score all the wagers from the tournament and place the finishers, pay ten percent of the tournament field rounded up.  so if there are 65 people then pay 6 places.  Start paying two places at five people, anything less is pay 1.  Start to pay three people at 10, start to pay 4 people 20, start to pay 5 at 35, start to pay 6 at 60, and then 10% from then on out.

	 pay 1 structure: 2 points
	 pay 2 structure: 4 points, 2 points
	 pay 3 structure: 9, 6, 3
	 pay 4 structure: 16, 12, 8, 4
	 pay 5 structure 25, 20, 15, 10, 5
	 pay 6 structure: 36, 30, 24, 18, 12, 6

	 I can create a function that calculates their tournament points.

	 for leagues, the users need the league password, once they have that they are brough to that leagues information and actions so any form submitted will have said leagues id.

	 create functions to score league games.


	 The first time to the league home page, the page first loads your clients for the league.

	 TO GENERATE LEAGUE WAGERS:

	 must use a show page of a league client, that way get the league client id and league id.

	 on the league home page page, first check if the current date is after the end date.  If it is after the end date then show the final standings of the league, if it is the last day or before then show them their client roster and link to the wager page(league_client_show), and standings.

	 if on the wager page:

	 find the league_id, league_client_id of all their clients.  store the ids in an array.  Check the clients to see if they qualify, the ids of the qualified clients stored in an array.

	 grab quaified[0] from the array and using their setting generate wagers.  Generate amount, type, and teams then auto submit and redirect back.  If qualified.length == 0 then display ALL ACTION IN.

	 back on the league home page have an option to see the action of participants.

	 for grading, have a link to the edit/league wager of the first wager and on that page redirect to the url of the next wager to be graded(just like in wagers controller).

	 have to loop through teams and look where display == on. and sort matchups into sport containers.  use the functions I have might be easiest.

	 qualify clients

	 Get clients picks

	 Let client pick games

	 fix oppo picks

	 get amount

	 get bet type

	 fill bet

	 submit

	 Things to do:

	 debug league wager grading

	 write all functions that grab you the standings of a league

	 create the league action page: where all open action for all players is displayed.

	 A place to talk trash maybe.

	 Set up the password for the private leagues, have to be sent to the private leagues show page after putting in the password.

	 Need design for all league pages, and need to make custom JS forms for gui.

	 Need to see if I can make js forms for the sign in and sign up

	 Need to design a home page

	 Need to make the how to play page, would like the mini links to bring people to the section of the document they want.


	 League play is pretty much set up.

	 To do list:

	 make private leagues work

	 set the grading to use the date of the team and the date of the wager

	 design league pages:

	 Leagues show

	 league_clients show

	 league_wagers show

	 league_wagers edit

	 The Home Page
	 

	 PRIVATE LEAGUES

	 set up the input that will have the password entered into it, and it will direct you to the correct league home page where the user will be loaded with the league clients.  Have to hook up for the private leagues.  That should not be too hard.

	 GRADING

	 have to filter grading by wager date and team date and then by t.name, t.opp, etc.  Make sure the date on the wager matches the daye on the matchup.  Then I can have a team involved in multiple matchups.

	 KEY PAGES FOR DESIGN:

	 User show page.  Going to need to design a page that shows the links to the league home pages that the user is in, also maybe thir scores in the leagues.  Give them their total bets backed and a total across all leagues.  Show a bunch of stats for them.  On this page you can show them their open action across all leagues.  Here also would be how many points they have earned.

	 League Home Pages.  This will have the client roster, league standings, maybe a breakdown on how each player is doing for each bet category.  Have to see what I can fit.

	 League Wagers Show.  This displays the open league action.  Mostly done, see about any details.

	 League_Client_edit.  See if the js form looks good enough.  Have to make up more js forms.

	 need to make league clients dependent on leagues maybe, definately have to add a validation for the league password.  It must be unique.

	 
	 	11/2/18 - FANTASY/SUICIDE GAME

	 	A pool can be started much like a league in the bookie game.  A pool can be public or private.  Go to the pools home page where you will get a list of the particpants who are still alive in the pool, also on this page are the pool of players for you to choose from, the player must choose the player from the group that will score the highest points for the night.  If they do then they advance to the next day or week of the tournament.  Pools will have to be desiganted to a sport or to all sports.  Player pools will be generated for the pools when needed.  Players will click on the name and that name will be saved into the ruby form.  Players will make selections.  Selections will take a user_id and a pool_id.  Selections will then get graded/edited and be desiganted a winner or a loser.  once a player gets a losing selection in a pool then they are out and no longer see the player pool and are given a notification in its place that tells them they are out and their name is taken off of the participants list.  Also have to list the selections for the players as they come in.

	 	I see a users controller of course, pool controller, selections controller, player controller.  Have to figure out how to form the player pools.  Going to have to count the players who are "on" and separate them into tiers: Top Tier Players, Mid Tier Players, Scrubs.  Pools will be made up of players of varying teirs.  No more than two of each teir in a group.  That would be a group of 6.  Group could be less than six as well, anywhere from 2 - 6 players in a group depending on who is playing.  Pools will have to disappear when the earliet game from the player pool starts.

	 	Try to have diverse pools if you can, a few of each tier.  This really won't be difficult to do, can have functionality done in two weeks tops.  ten sessions of two-three hours.  Thirty hours of work.  Then can have a NCAA suicide pool when players will be limited as to the seeds they can take: 8 seed or higher in round of 64, 6 seed or higher in round of 32, 4 seed or higher in sweet sixteen, 2 seed or higher in elite eight, then in final four and on can take any seed you want.  That won't be that bad either.  Will need a March Madness Team Controller.  That won't be that bad at all.

	 	So, this site will be a fantasy sports site that offers three games, the bookie leagues, the Fantaside, and the march madness game.

	 	What is the sites name?  Fantasy Games, Sports, Competition...FanComp.com.

	 	So, this site will offer alternate fantasy games for people that like to play fantasy sports, and the games will be able to be run in a league style format.  Leagues will eventually have a cost to it.  Max players will have values, like max ten may cost 5.99, but max 500 may cost 49.99.

	Bookie Leagues: can sign up, can create a new league or join an existing league, can acquire league clients, can book league wagers, can grade league wagers.  Can keep standigs for the league, can shut the league off after the end date, in process of keeping track of what each client wins or loses during the pool. 

	Fantiside Pools

	Player groups will be generated on the page load.  Players will need to be sorted by sport.  Then each array of players will need to be counted and sorted into tiers.  Three or four tiers, not sure how many right now.  The choices should be easy to start, maybe two choices one a top tier and the other a mid tier.  Then it is a top guy with two mids, then two top guys and a mid, then four mids, as the pool goes on the player groups have to get harder and harder.   


	It is all there, just now have to style the key pages:

	HOME PAGE:  

	Something descriptive about what the site is, I want this to be the login page that has a small login box at the top right of the page, under it can be the forgot password and a thumbnail for the new registration.

	The home page has to speak to what the site is, a new way to play fantasy sports, two new games to play in the fantasy industry:  Bookie Leagues and Fantiside pools.  Maybe a third product built around march madness.  Run in suicide manner, but players are restricted to the seeds they can take in each of the six rounds, the further they go, the more higher seeds that get unlocks.  Round 1: must pick an 8 seed or higher, Round 2: must pick 6 seed or higher, Round 3: must pick 4 seed or higher Round 4: must pick 2 seed or higher, then in Round 5: can pick any seed and for Round 6 as well.

	So on the home page some bullet points that advertise the new games:  Their names, a brief descriptions, they can be played in public or private leagues.  Walk them through how they can create a private league and give the league password to those who you want to play against.  Or play in public leagues and earn rating points for finsihing "in the money".  Maybe the public leagues have faux prize pools - rating points up for grabs.  Can they buy into the tournaments with their rating points?  The public leagues need something up for grabs.  That is something that still has to be done.

	Users Show Page/Profile:

	This has to show all their active games and get to the league home pages from here.  Upon logging in, this is the page they should get to and from here they can get to whichever league they want.  The pool they are in, their standings, their tier points, their breakdown of how many pools they have played in both public and private.  Maybe career winnings for public leagues, and their record in private leagues.  This is an informative page but also it is the highway to the rest of the site for the user, from this page they can get to any league they are in.

	Index Pages for the games:

	where public leagues are listed and their is a password option for private leagues.  This is where they will enter a league for the first time.

	Create New Leagues for all games:

	I want to use js forms for this and enter into ruby form in code.

	League Home pages:

	this will display all league information: active players, standings, appropriate stats and information about the pool plus this page will hold the tools to make selections in the pool.

	NAVBAR: sign in, sign out, sign up, PROFILE, INDEX TO BOOKIE LEAGUES, INDEX TO FANTSIDE, then when it is time need to add the march madness pool into the link, also need to have a link to the page that describes the games and explains a little about the site.


	THINGS TO DO FOR BOOKIE LEAGUES:

	Have to drop the db again and recreate a bunch of teams and a bunch of players.  Then need to see if it is catching the proper matchup from the db, wager and matchup have to match.  After that, need to finish design on league show page.  Once that is done, Bookie Leagues is complete.




	Have to fix the creating wagers and grading wagers so it takes into account the date, this may take an hiur or two.  Need to rethink how to generate teams for wagers, may not need the display on/off option.

	Have to create the users profile page.  Gonna wait for second game to be finished.


	Finish up bookie leagues, get some design on all pages and then make the second game.

	Fanicide Pools:

	Need pool controller, model, and pool show page
	Need player_group controller, model
	Need player controller, model, show page

	Every pool has its own player group.  Player groups are formed based on what day the pool is in, the deeper into the pool it goes the harder the selections.

	Pool Controller

	user_id
	sport option
	password
	pick how often
	have to see what else...

	player_group controller

	pool_id
	date
	player1
	player2
	player3
	player4
	player5

	player controller - created by me

	first_name
	last_name
	full_name
	sport

	Contest controller/Model - created by me

	player_id
	date
	name
	sport
	def_ranking
	pitcher
	location
	points

	Selection Controller/Model

	pool_id
	user_id
	selection - name
	result

	go to the fanicide index, create a new pool.  The pool password brings you to the pool home page where the pool admin must create the player group for the day.  Once the player group is made, it is visible to all players in the pool.  The display will be in js so the names themselves can be clicked on. Once the name is clicked on, the form is filled out and saved.

	going to be lots of if statements on that page for when you can see the player pool and when you cant and when you can make picks and when you can't.  Messages for when there is no pool: could be waiting for commish, could be knocked out, pool could be over.

	Need a section to show who has each player, both how many and the individuals.

	What do I need?

	I go to the players edit page where I can create a ticket that inherits the players id and their name and the date, but then filled in by me is the defensive ranking or pitching ranking of their opp, and denote home or away, then filled in later will be their score.  We also need a player denotation of value.  So the program knows who the stars are.  We'll have a four tier system.  The stars, the good, the avg, the bad.

	Ranking in everything but MLB goes top 10, avg, bad.  For baseball we'll go starter position: 1, 2, 3, 4, 5.

	Let the sorting be done by date.  So, now I created these players.  Now on the pool show page the players with the current date are sorted by sport and by value.  Then a player group is generated by the league commissioner and is saved in the database, taking the appropriate players from the various player pools.  Once the player group is generated, have to loop it and set each value equal to a js var that then is pushed to an array so I have the players in js and can put add event listeners in the div so when the div is clicked that name goes into the ruby form for selection and then is saved.

	Once a user has a selection for the current day then they do not see the player pool for that day anymore, instead they see who everyone has taken.

	POOL MODEL
	has_many users
	has many player_groups
	has many selections

	PLAYER GROUPS
	belongs_to pool

	SELECTION
	belongs-to user
	belongs_to pool

	PLAYER
	has_many tickets

	TICKET
	belongs_to player

	POOL MIGRATION

	commish_id
	Date
	Sport
	pass

	GROUP MIGRATION

	pool_id
	date
	player1
	player2
	player3
	player4
	player5

	SELECTION MIGRATION

	user_id
	pool_id
	selection
	points
	result

	PLAYER MIGRATION

	name
	sport
	rating

	TICKET MIGRATION

	date
	player_id
	name: name
	rating: rating
	sport: sport
	def rating
	pitcher
	score


	For Pools show:

	first, have to check to see if 0 remain, 1 remains, or more than one remains.  If 0 remain, must start over with the contestants that started the day, if 1 remain then that person is the winner, if more than one remain then those get to pick again.  if users selections for this pool are all winners then the player group is clickable, if they are not all winners then they get to see who everyone has taken so far.

	Have to wireframe the pool show page.  Pool participants.

	to protect against people jumping in after it is created, count how many player groups have been created except for the current day.  Contestants should have that many selections, get the start date of the pool and ask if the user has a selection with that date.  If they do then they were in the pool, if they do not then they are trying to jump in.  If they do not have a selection on the start date then they can't see anything.

	If you skip a selection then you are out as well, to continue on in the competition you have to have the right number of selections and they all have to be winners.  Need an exception for if everyone loses, if on the check the count is zero then we see who had selections the day before(how?), can do it by asking if the pool has selections, if it does pick out the users that have the same number of selections as the pool has player groups(minus todays group if there is one).  If they do, then their booleen gets turned true.

	Need to work the current_user's ability to make selections by a booleen.  If they meet certain criteria, then the booleen is turned true.  Or do I just make it easy and make 0 left(with the condition of existing selections == graded) equals a tie between all who got knocked out at the same time.

	How to check who is left in the pool?  Does the current_user have as many selections as previous player groups and are they all winners.  Or simply just give me users who have the proper amount of selections and all are winners.  Push them to an array and count them.

	Need to count who is left in the pool, write in exception for new pools.  See if it is 0, 1, or more than 1.

	If 0 and it is a new pool, then qualify all users to make selections, if it is 0 with graded selections in its history then grab all those who made a selection the previous day - go by player groups.  Number of Selections and total player groups - current days player group should be equal.  Qualify the proper users to pick again.

	If it is 1 player left then display final standings: how many picks people made and display who the winner is and maybe give them a personal message.

	If it is more than one, then have to qualify who is left and give them the ability to make selections.  After the selection is made then they can see how many have taken each player in the group.  Maybe give them a box where they can see who they have taken so far.

	If more than 1 remains and they do not qualify to make selections then they see the grid of who people have taken.  Can give them a selections in count, maybe let them know how many left.

	1 - check to see if there are selections to be graded, if there are then let the commish have the link to grade selections, if they are not the commish let them see the data from the previous day.

	2 - if there are no selections to be graded, see if how many people are left in the pool.

	3 - if 0 left, see if it is a new pool first.  If it is a new pool then all users are qualified to make a selection, if it is not a new pool then retrieve the last users to make a selection and qualify them again to choose.

	4 - if it is 1 left then display the standings and the winning message for the winner and the other message for everyone else. Maybe add a link for a new pool.

	5 - if more than one left, then qualify the appropriate users to go ahead and make another selection.

	Creating player groups - sort all tickets with todays date and display == on.  Sort them by sport and player rating.  Then get a count on how many player groups there have been.  Have code to generate a player group according to how many player groups there have been.

	if player groups == 0: get a star and a scrub
	if == 1: get a good and a scrub
	if == 2: get a star and a good
	if == 3: get a star and two goods
	if == 4: get a two good and two scrubs
	if == 5: get three scrubs
	if == 6: get two stars and two good
	if == 7: get two stars
	if == 8: get three good

	need to have "easy" "doable" "hard" "50/50"

	Can everyone grade their own?  when someone comes to the page I look at their selections for this pool and see if the last one is not graded and the signal is clear to grade then grade it, if not then let them see the ungraded display.  This is a possibility.

	Pools Show

	master if statement - if there are pools to grade:

	Show them the participants and how many picks they've made, if someone has an ungraded selection, display the selection.  With a note saying we are waiting for the commissioner.

	if there are no selections to grade...

	then we find players remaining and have a three teir if statement for how many players left. 0, 1, or > 1

	have to incorporate the passwords.  Keep user_id on the password form.  Then at the pool or league page, check to see how many people have entered the passord.  Those are the people in the pool.

	FanBouts.com

	Home page: login/signup.  Sells who we are: Alternative fantasy sports games.  Introduce the two games.  Bookie Wars and Faniside Pools.  From this page the user either has to be able to get to pages where they can either create a new league/pool, they also need to be able to get to the index pages of the league/pool.

	The index pages.  On the index pages maybe can be an explanation about how to play, an option to create a new league or to enter a password to an existing league.  List leagues maybe.

	League/Pool home pages: this will work by finding the password and then checking to see who has entered the password into the database.  Those are the people in the league/pool.  On this page will want to list stats from the pool, standings, and hold the functions that allow people to be active in the pool(make a pick or create sports action). 

	About Us Page:  Describe our mission and our motive, describe the games and how they are played.

	Create a trash wire?  A place people can talk trash either to a group or to an individual.  Something to think about.

	Pools will have a start date, Leagues will have a start and an end date.

	The first if statement then is if the pool has started or it has not, if it has not we have the pre start screen, a message letting them know the pool has not started yet and a list of the entrants so far, maybe a mock up of the pool or league controls, then if it is the start day or later go into an else statement that will handle the logistics of the pool/league.

	for Leagues once it has started, it is easy it keeps going until the serial check is greater than the end date, if leagues are in go mode then it is just a cycle of setting the client roster, booking the action, grading the action.

	for Pools, first you see how many players left, if more than 1 then have to see if selections need grading.  if they do, then can't put the selections in yet and can't make a group.  If all selections are up to date the commish can generate a player group, once a group exists then the controls to create one disappear, just work it by the date, if a group exists then the link doesn't appear.  Once selections are opened then people can click on the player they wish.  Once they make a selection, then they get to see how many people have picked each person in the group.

	So the cycle is group creation(by commish), selections(by all), grade selections(by commish).

	For Bookie Wars:

	I generate matchups.  These matchups are sorted by sport and then by wager type, MLB and NHL can not appear in teasers. They are ready to go as far as being used in wagers.  The user now gets to set their client roster and select the betting options they wish.  Once they do, then they can generate wagers using the matchups.  Wagers are placed by randomly selecting an applicable client from their list and generating a wager based on their attributes.  Once all action is in then they can see the action open by the whole league.  Then I edit the matchup forms and then the action can be graded the next day by the user.  Once they have no wagers to be gradeded then they can set their roster again.

	Al this is in place, most of it anyway.  All the elements having to do with matchups and wagers is all their and the grading scale and the standings are there too.  Have to set it up inside of its if statements for start date and end date.

	For Faniside Pools:

	I generate player tickets, these tickets are sorted by sport.  From these arrays of players random groups are formed and saved.  Entrants then make a selection from the group which is saved.  Have to set it up inside of its if statements.

	This week, my goal is to get Bookie Wars in tip-top shape.  Get a good trial version of the game going. Next week nail down faniside pools, get the trial version debugged and working.  Then wireframe the pool show pages and enter the functionality into the design.

	Then have to create the user profile page, which will house the links to all the leagues and pools they are in.

	Navbar for users: Faniside Home, Bookie Wars Home, user-profile, sign out, payout explanantions.

	I will need to create at least 5 matchups in each available sport if applicable, nights where there is only a few games then enter them all.  On Sunday try to enter all the NFL. You are looking at 12 - 15, up to 20 maybe with the fantasy matchups. matchups per day.  That may take 20 - 25  minutes.  Gonna have to create 15 ticktes and maybe some new players every night.  That may take 20 min.  You will need to also fill in the matchup forms from the previous day, that's 10 minutes and the tickets from the previous day that's 5 - 10 minutes.  So, going to need an hour in the morning.

	Also going to need to take matchups and tickets off the board.  Use display for matchup and started for tickets.  Need to know if all games have been updated.  Use the updated fields for each form.  Run an updated check to see if all have been updated, if they have switch a boolean from false to true.  If all have been updated then selections or betting action can be graded.  


	so, in two weeks have both games done.  Then the next week set up a basic design for the key pages you have left.  Once that is done launch through heroku at the end of the third week, holdiays coming so lets say by Jan 4th be live and start running test pools and leagues with friends and get some feedback. Tweak for a week after we see what being in a league is like, make sure standings and computations have zero bugs.  Once that is set, get strangers to try them and start getting leagues off the ground.

	Leagues:

	if it is before the start date, load their clients and then give them a message about when their league starts and maybe what they will have to do, a mock up of the page.

	If it is the start date: load the clients and then produce the roster and the links.

	If it is past the start date but before or equal to the end date load the clients and produce the roster and links

	else if it is past the start date and past the end date show the final standings.


	Cycle through matchups, get all the matchups that are on and have the current date.  Call all the sorting functions.  Then bets are ready to be placed.  This is on league_clients show.




	For Bookie Wars:

	Create Matchups which take a date, wagers are generated and take a date.  For grading loop through ungradeded wagers, for each wager loop through teams.  Pull out all matchups that match the date on the wager, push them to an array.  end 2nd loop, outside 2nd loop: loop through the array that holds all the matchups on that date and then proceed with the grading.  Because now the array will hold all the right matchups.

	Have to figure out how to loop through the right matchups when looking for a match between their pick and the teams on the matchup.  Maybe collect the date at the time of the pick.  May need to rethink this process a little.  It needs streamlining.  Use the code I have but make it stronger, cut the fat and make sure it includes the variables you need.  Have to go through each function from start to finish.  This is going to take more work than I thought.  A solution is very doable and will be done.

	Core functionality to Bookie Wars is complete.  League_clients_show(book wagers) and League_wager_show(grade wagers) need a design.  Once that is done need to add a way to turn games off once they start, duh...

	Have to fix the date on bookie wars, make it eastern standard time, the day is turning at 9pm my time.

	Have to get rid of the drops downs and make a box with 31 numbers in js, they will click on their choice.  Drop down was blocked on safari.

	For faniside home:

	What information?

	first, gather all secrets that match this pool's password.  These are the players.  Loop through the users pool selections, look for the pool's id and get all selections that belong to this pool.  Count the selections made by each user, this is the number of selections the player has made in the pool.  Have this list, the players with the proper amount of selections are in green, the ones who are out are red.  We'll call this the standings.

	We need to see the current group of players in js and each one needs to be clickable, and that click saves that player to their selection.  One selection per day.

	The commissioner of the leage has the controls for creating a new group, and grading selections of the pool.  If their are selections outstanding then just the grade selections link is there, and if no selections are outstanding then the generate player group is there.

	I create tickets...

	The tickets are sorted in the backend...

	groups are generated...

	users make their selection...

	I edit the tickets with the points scored by the player...

	I make new tickets...

	Selections are graded....

	the next group is generated...

	We land on Pools Show...

	1) qualify users
	2) see if this pool has any groups
		
		if no then ...

			create the first group

		else ...

			run the score selections if need to, else...

			get remaining contestants, if 0 this, if 1 that, if more than one...

			see who is qualified to make a selection and who is not.


	3)

	Need code for a new pool and a pool that has started.


	Where we are:

	I can get faniside pools to the testing phase and debugged in a week.  I will spend a few days giving a basic style to pools show.  Then I need to stand back and take stock on where I am with both games for a day or two.  Core functionalities will be there, but will need some details added or debugged.  Once that is complete then time to look at the pages and start deeper styling, this may take a week.  By the end of January be ready to test with public.  Spend a few days uploading to heroku and then debug the heroku version of the script. Start running the pools/leagues.  We are looking 25 - 30 days.


	if pools.groups.length == 0

		if pool.commish_id == current_user.id

			"abilty to create new group"

		else "a message to notify them that the first group has not been generated yet"

		end

	else

		loop pool.selections

			if s[i].result == "none" && s.date == @my_date

				outstanding_selections == true

			end

		end

		if outstanding_selections == true 

			if current_user.id == pool.commish_id

				code to grade selections

			else

				message that waiting on commissioner to grade old selections.

			end

		else

			see how many players left and send them to an array

			if players left == 0

				The players with the most selections tie for the win

			elseif players left == 1

				if current_user.id == winner.id

					message to winner

				else

					message to pool players

				end

			else

				if pool.groups.last.date == @my_date

					loop array

						if array[i].id == current_user.id

							loop pool selections

								if s.user_id == current_user.id && s.date == @my_date

									current_selection == true

								end

							end

							if current_selection == true

								code for metrics

							else 

								code for selection

							end

						else

							code for metrcis

						end

					end
				
				else
				
					if current_user.id == pool.commish_id

						code to form a group


					else 

						"waiting on group" message

					end
				end

			end

		end

	end

				




				












				if current_user.id == pool.commish_id

					if pool.groups.last.date != @my_date

						code to generate a new group.

				else

					if pool.group.last.date != @my_date

						message that waiting for next group

					else

						loop player_array

							if array[i].id == current_user.id

								loop pool.selections

									if s.user_id == current_user.id && s.date == @my_date

										


								if current_selection == true

									code for metrics

								else

									code for selection



				
				





	Step 1 to a page:  Do a ticket check and see of this pool is even able to generate a group.

	Get all pool players

	if in pool...

		if pool.groups.lenth == 0

			if current_user is the commish

			else

				user is not commish

			end

		else groups exist

			see if there are outstanding selections for the pool...

			if yes

				link to grade old selections

			if no

				get remaining players

				see if a group already exists for the day...

				if yes

					see if the user has made a selection

					if yes

						metrics

					if no

						selection form

				



	Faniside pools are in testing.  Grading seems to work.  Selections are being saved and the if statement tree that works the page seems to be acting correctly.  Just put in another test group to see.

	After the testing is complete, then need to review both games.  Make sure both work and are debugged.

	Then need a basic style for each of the games home pages, more for faniside pools.  Then upload to heroku and debug on heroku.

	Going have to replace the drop downs with js clicks, drop downs were not showing in all browswers.

	Once that is complete, then debug on heroku again.  And then get 10 - 20 people to play in each game.  get some feedback and debug.

	Set-up the mobile and tablet versions.  upload to heroku.  final debugging on heroku.

	Run the first real pool.

	ariable scheme, Group Form, Selection Form, create a group if possible, if not possible turn a value false.

Get the players in the pool, turn in_pool true on them.

needs grading
group ready
current_selection


if @in_pool == true

	if needsgreeding == true

		@needs_grading == true

		need to loop selections and also capture all selections with none

	elsif @pool.groups.length == 0

		@pool_groups_zero == true

	elsif @pools.groups.length == 1 && nogradedselections == true

		@new_pool == true

	else

		@running_pool == true

else

	YOU ARE NOT IN THIS POOL



end

if needs_grading == false && @ply1.class.to_s == "Ticket"

	@group_ready == true

elsif needs_grading == true

Faniside pools is ready to test. Need to get as many people as possible.  Run it in NBA.  One thing for faniside pools is to make sure grade selections does not show up unless old tickets are updated.

Have to go over bookie wars again and make sure it is working correctly.  Run a test in that as well.  Work on design a little for the show pages and the grading pages.  Bookie wars needs a once over to make it flow like faniside pools.

Once that is complete in about two - three weeks...  

So the next step is to upload to the heroku platform and debug after bookie wars and faniside pools get a once over to get rid of any last bugs, then upload to heroku and debug for their platform.

March 1st have the soft launch.

For Bookie Wars: do checks for start time, do checks for passwords.

function that lables start_time var, function that sets the value of in_league.

If @in_league == true

	load clients...

	If league_status == "early"


	elsif league_status == "active"


	elsif league_status == "complete"  

</div>

Pages:

Home Page - needs some work, some pizazz.  Look at fandeul, look at fantasy sites, gambling sites.  Get some ideas.

Sign Up Page - needs just a basic style, some self promotion on the edges and in the middle of the page the sign up form.

Each Game's home page(index)

	Have basic architecture of these pages, need to work on some specifics.

users profile - needs a full design, somekind of mockup.  Starting from scratch.

grading pages(something simple) - this is sothing special.  Just the results flashing in the middle of the pages.

League Home Page - have the stats needed for the page, organized and displayed in divs.  Basic data design is there, add some color maybe or some pics.  Not sure.  

League Action Page - the laptop design of this page works fine.  need to think mobile.

Users league wager results - a list like the action page but with results.  Color coat the wagers.  Winners are green, losers are red.  Then I can give them some stats too.  talley results in all wager types.  Tally winners/losers for each wager type and make a chart. Make this all results, not just the user.  Maybe list the +/- leaders in each bet category.  I can make a nice stat page here using these stats.  Woudn;t take much work.

Pool Home Page - like leagues, all data is laid out in divs ready to go, maybe add some flair, need inspiration from other websites.

The one major headache task to do is to translate all html drop downs into javascript links.  Not all browsers support the drop downs I am using.  I want that done this week.

Feb 25 2019 - Page edits

APP.erb - style the link bar
HOME PAGE - needs some color maybe an image or two
SIGN UP - needs to basic sign up js modal
PROFILE - color scheming. Maybe more stats, have to think of what
League Index - decent shape
Pool Index - decent shape
League Show - maybe some color, but in decent shape
Pool Show - need to tinker with this pages styling
LW/EDIT - maybe some color, but info is there: grading screen
SEL/Edit - grading screen, need simple info disply.

Functionality seems to be working well.  I am getting the results I want/expect.  Information is displayed correctly and not getting thrown any errors. 

MAR 15 2019 

The site is up at fanbouts.com.  Still a few small details to take care of.

1. TAKE CARE OF HALF POINT ISSUES ON FILL WAGERS AND GRADE WAGERS.  DISPLAY WAGERS SHOULD TAKE CARE OF IT SELF ONCE FILL WAGERS IS CORRECT.

2. NEED A SIMPLE DESIGN FOR THE GRADING OF WAGERS AND SELECTIONS AS WELL AS THE FINAL PAGE OF LEAGUES AND POOLS ONCE THEY ARE OVER.

3. RUN AN EXHAUSTIVE TEST OF BOTH GAMES TESTING ALL FEATURES.

3.  GET RID OF ALL DEBUGGING CODE ON ALL PAGES.

Next week all three of those things will be done and then run an exhaustive test all next weekend and into the next week.  For the late part of next week do final tinkering for text, stat layout and other design or links, buttons etc.

4.  Drop the heroku DB and create a new one then migrate all new changes.  Set myself up as admin and then start trying to run pools with the public.  Should be here in 10 days - 12 days.



